rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function hasValidFields(requiredFields) {
      return request.resource.data.keys.hasAll(requiredFields);
    }

    // User profiles
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isOwner(userId) 
        && hasValidFields(['displayName', 'email', 'createdAt']);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
      
      // User's private data
      match /private/{document=**} {
        allow read, write: if isOwner(userId);
      }
    }

    // Catches
    match /catches/{catchId} {
      allow read: if true;
      allow create: if isAuthenticated() 
        && hasValidFields(['userId', 'species', 'location', 'timestamp', 'imageUrl']);
      allow update, delete: if isAuthenticated() 
        && request.resource.data.userId == request.auth.uid;
    }

    // Spots
    match /spots/{spotId} {
      allow read: if true;
      allow create: if isAuthenticated() 
        && hasValidFields(['userId', 'name', 'location', 'isPublic']);
      allow update, delete: if isAuthenticated() 
        && resource.data.userId == request.auth.uid;
      
      // Spot reviews
      match /reviews/{reviewId} {
        allow read: if true;
        allow create: if isAuthenticated();
        allow update, delete: if isAuthenticated() 
          && resource.data.userId == request.auth.uid;
      }
    }

    // Social
    match /social/{document=**} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated();
    }

    // Premium content
    match /premium/{document=**} {
      allow read: if isAuthenticated() 
        && exists(/databases/$(database)/documents/users/$(request.auth.uid)/private/subscription);
    }
  }
}
